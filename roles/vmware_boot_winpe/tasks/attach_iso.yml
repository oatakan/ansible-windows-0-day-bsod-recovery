---
- name: attach iso
  community.vmware.vmware_guest:
    hostname: "{{ lookup('env', 'VMWARE_HOST') }}"
    username: "{{ lookup('env', 'VMWARE_USER') }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD') }}"
    validate_certs: false
    uuid: "{{ hostvars[item].config.uuid }}"
    cdrom:
      - type: iso
        controller_type: sata
        controller_number: 0
        unit_number: 0
        iso_path: "[{{ vmware_boot_winpe_vcenter_target_datastore }}] {{ vmware_boot_winpe_vcenter_destination_path }}/{{ vmware_boot_winpe_iso_file }}"
    state: present
  async: 7200
  poll: 0
  register: vms_attach_iso
  loop: "{{ ansible_play_hosts }}"
  when:
    - nodes is defined
    - hostvars[item].config.uuid is defined
    - hostvars[item].config.name is defined
    - (nodes | json_query(query)) | length > 0
  vars:
    query: "@[?name==`{{ hostvars[item].config.name }}`]"

- name: wait for vms to be updated
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: vm_attach_iso
  until: vm_attach_iso.finished
  retries: "{{ vmware_boot_winpe_instance_wait_retry_limit }}"
  delay: 10
  loop: "{{ vms_attach_iso.results }}"
  when:
    - nodes is defined
    - vms_attach_iso.results is defined
    - item.ansible_job_id is defined

- name: set boot from iso
  community.vmware.vmware_guest_boot_manager:
    hostname: "{{ lookup('env', 'VMWARE_HOST') }}"
    username: "{{ lookup('env', 'VMWARE_USER') }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD') }}"
    validate_certs: false
    uuid: "{{ hostvars[item].config.uuid }}"
    boot_order:
      - cdrom
      - disk
  loop: "{{ ansible_play_hosts }}"
  when:
    - nodes is defined
    - hostvars[item].config.uuid is defined
    - hostvars[item].config.name is defined
    - (nodes | json_query(query)) | length > 0
  vars:
    query: "@[?name==`{{ hostvars[item].config.name }}`]"
